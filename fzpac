#!/usr/bin/env bash

set -o errexit
set -o nounset

readonly THIS_CMD="${0##*/}"
readonly PACMAN="${FZPAC_PACMAN:-pacman}"
readonly PACMAN_LIST=(
	"paru"
	"yay"
	"pacman"
)
readonly STYLE_BOLD=$'\033[1m'
readonly STYLE_RESET=$'\033[m'

_version() {
	readonly VERSION='2.0.0'
	readonly AUTHOR="sheepla"
	readonly LICENSE="MIT"
	readonly GITHUB_URL="https://github.com"

	cat <<EOF
$THIS_CMD -- v$VERSION

Released under the ${LICENSE} License.
    Repo:   ${GITHUB_URL}/${AUTHOR}/fzpac
    Author: ${AUTHOR} (${GITHUB_URL}/${AUTHOR})"

* ${THIS_CMD} uses this command as a pacman-like command: $(_pacman)
EOF
}

_help() {
	cat <<EOF
${THIS_CMD} -- Arch Linux package finder with fzf

${STYLE_BOLD}USAGE${STYLE_RESET}
    ${THIS_CMD} SUBCMD [KEYWORDS...]
    ${THIS_CMD} --help|--version

${STYLE_BOLD}SUBCMD${STYLE_RESET}
    s, search        search for all available packages
    l, local         search for already installed packages
    s, install       select packages and INSTALL it
    R, remove        select packages and UNINSTALL it
    A, autoremove    select packages that are no longer needed and UNINSTALL it.
    h, help          show help message
    v, version       show version

${STYLE_BOLD}OPTIONS${STYLE_RESET}
    -h, --help           show help message
    -v, --version        show version

${STYLE_BOLD}KEY BINDINGS${STYLE_RESET}
    <C-j>, <C-n>  move focus down
    <C-k>, <C-p>  move focus up
    <Tab>         select a package
    <CR>          confirm selection
EOF
}

_main() {
	if [[ "${#}" -lt 1 ]]; then
		_help
		exit 0
	fi

	_test_cmd fzf || return 1

	local pac
	pac="$(_pacman)"

	for arg in "${@}"; do
		case "${arg}" in
		s | search)
			shift
			_search "${pac}" "${@}"
			break
			;;
		l | local)
			shift
			_search_local "${pac}" "${@}"
			break
			;;
		S | install)
			shift
			if [ "${pac}" = "pacman" ]; then
				_search pacman "${@}" | sudo pacman --sync -
			else
				_search "${pac}" "${@}" | "${pac}" --sync -
			fi
			break
			;;
		R | remove)
			shift
			if [ "${pac}" = 'pacman' ]; then
				_search_local pacman "${@}" | sudo pacman --remove --nosave -
			else
				_search_local "${pac}" "${@}" | "${pac}" --remove --nosave -
			fi
			break
			;;
		A | autoremove)
			shift
			if [ "${pac}" = 'pacman' ]; then
				_search_no_deps "${pac}" "${@}" | sudo pacman --remove --nosave --recursive -
			else
				_search_no_deps "${pac}" "${@}" | "${pac}" --remove --nosave --recursive -
			fi
			break
			;;
		h | -h | help | --help)
			_help
			break
			;;
		v | V | version | --version)
			_version
			break
			;;
		*)
			_err "Invalid sub command: ${1}."
			_help
			return 1
			;;
		esac
	done
}

_test_cmd() {
	for cmd in "${@}"; do
		if ! command -v "${cmd}" &>/dev/null; then
			_err "${cmd} is not installed. please install it."
			return 1
		fi
	done
}

_pacman() {
	if [ ! "${PACMAN}" = "pacman" ]; then
		echo -n "${PACMAN}"
		return 0
	fi

	for pac in "${PACMAN_LIST[@]}"; do
		if command -v "${pac}" &>/dev/null; then
			echo -n "${pac}"
			return 0
		fi
	done

	_err 'The command for pacman or AUR helper was not found.'
	exit 1
}

_fzf() {
	env LANG=C fzf --ansi --reverse "${@}"
}

_err() {
	echo -e "[ \e[31mERR\e[m ] ${*}" >&2
}

_search() {
	local pac="${1}"
	shift
	"${pac}" --sync --search --quiet "${@}" |
		_fzf --multi --preview "${pac} --sync --info {}"
}

_search_local() {
	local pac="${1}"
	shift
	"${pac}" --query --search --quiet "${@}" |
		_fzf --multi --preview "${pac} --query --info --list {}"
}

_search_no_deps() {
	local pac="${1}"
	shift
	"${pac}" --query --deps --unrequired --quiet "${@}" |
		_fzf --multi --preview "${pac} --query --info --list {}"
}

_main "${@}"
exit "${?}"
