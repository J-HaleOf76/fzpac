#!/usr/bin/env bash

set -o errexit
set -o nounset

readonly THIS_CMD="${0##*/}"
readonly PACMAN="${FZPAC_PACMAN:-pacman}"
readonly PACMAN_LIST=(
	"paru"
	"yay"
	"pacman"
)
readonly STYLE_BOLD=$'\033[1m'
readonly STYLE_UNDERBAR=$'\033[4m'
readonly STYLE_RESET=$'\033[m'

_version() {
	readonly VERSION='2.0.0'
	readonly AUTHOR="sheepla"
	readonly LICENSE="MIT"
	readonly GITHUB_URL="https://github.com"

	cat <<EOF

${STYLE_BOLD}${THIS_CMD}${STYLE_RESET} -- ${STYLE_UNDERBAR}v${VERSION}${STYLE_RESET}

Released under the ${LICENSE} License.
    Repo:   ${GITHUB_URL}/${AUTHOR}/fzpac
    Author: ${AUTHOR} (${GITHUB_URL}/${AUTHOR})

* ${THIS_CMD} uses this command as a pacman-like command: $(_pacman)
EOF
}

_help() {
	cat <<EOF
${THIS_CMD} -- Arch Linux package finder with fzf

${STYLE_BOLD}USAGE${STYLE_RESET}
    ${THIS_CMD} ${STYLE_UNDERBAR}SUBCMD${STYLE_RESET} [${STYLE_UNDERBAR}KEYWORDS...${STYLE_RESET}]
    ${THIS_CMD} -h|--help
    ${THIS_CMD} -v|--version

${STYLE_BOLD}SUBCMD${STYLE_RESET}
    s, search        search for all available packages
    l, local         search for already installed packages
    s, install       select packages and INSTALL it
    R, remove        select packages and UNINSTALL it
    A, autoremove    select packages that are no longer needed and UNINSTALL it
    h, help          show help message
    v, version       show version

${STYLE_BOLD}OPTIONS${STYLE_RESET}
    -h, --help       show help message
    -v, --version    show version

${STYLE_BOLD}KEY BINDINGS${STYLE_RESET}
    ${STYLE_UNDERBAR}<C-j>${STYLE_RESET}, ${STYLE_UNDERBAR}<C-n>${STYLE_RESET}  move focus down
    ${STYLE_UNDERBAR}<C-k>${STYLE_RESET}, ${STYLE_UNDERBAR}<C-p>${STYLE_RESET}  move focus up
    ${STYLE_UNDERBAR}<C-s>${STYLE_RESET}         show information of the package
    ${STYLE_UNDERBAR}<Tab>${STYLE_RESET}         select a package
    ${STYLE_UNDERBAR}<CR>${STYLE_RESET}          confirm selection
EOF
}

_main() {
	if [[ "${#}" -lt 1 ]]; then
		_err "Must require arguments..."
		_help
		exit 1
	fi

	_test_cmd fzf || return 1

	local pac
	pac="$(_pacman)"

	for arg in "${@}"; do
		case "${arg}" in
		s | search)
			shift
			_search "${pac}" "${@}"
			break
			;;
		l | local)
			shift
			_search_local "${pac}" "${@}"
			break
			;;
		S | install)
			shift
			local pkgs
			pkgs=(
				"$(_search "${pac}" "${@}")"
			)
			_install "${pac}" "${pkgs[@]}"
			break
			;;
		R | remove)
			shift
			local pkgs
			pkgs=(
				"$(_search_local "${pac}" "${@}")"
			)
			_remove "${pac}" "${pkgs[@]}"
			break
			;;
		A | autoremove)
			shift
			local pkgs
			pkgs=(
				"$(_search_no_deps "${pac}" "${@}")"
			)
			_remove "${pac}" "${pkgs[@]}"
			break
			;;
		h | -h | help | --help)
			_help
			break
			;;
		v | -v | version | --version)
			_version
			break
			;;
		*)
			_err "Invalid sub command: ${1}."
			_help
			return 1
			;;
		esac
	done
}

_test_cmd() {
	for cmd in "${@}"; do
		if ! command -v "${cmd}" &>/dev/null; then
			_err "${cmd} is not installed. please install it."
			return 1
		fi
	done
}

_pacman() {
	if [ ! "${PACMAN}" = "pacman" ]; then
		echo -n "${PACMAN}"
		return 0
	fi

	for pac in "${PACMAN_LIST[@]}"; do
		if command -v "${pac}" &>/dev/null; then
			echo -n "${pac}"
			return 0
		fi
	done

	_err 'The command for pacman or AUR helper was not found.'
	exit 1
}

_fzf() {
	env LANG=C fzf "${@}"
}

_err() {
	echo -e "[ \e[31mERR\e[m ] ${*}" >&2
}

_search() {
	readonly HEADER="<C-s>: show package info"

	local pac="${1}"
	shift

	export -f _show_info

	"${pac}" --sync --search --quiet "${@}" |
		_fzf \
			--multi \
			--header "${HEADER}" \
			--preview "_show_info ${pac} {}" \
			--bind "ctrl-s:execute(_show_info ${pac} {} | less)"
}

_search_local() {
	readonly HEADER="<C-s>: show package info"

	local pac="${1}"
	shift

	export -f _show_info_local

	"${pac}" --query --search --quiet "${@}" |
		_fzf \
			--multi \
			--header "${HEADER}" \
			--preview "_show_info_local ${pac} {}" \
			--bind "ctrl-s:execute(_show_info_local ${pac} {} | less)"
}

_search_no_deps() {
	readonly HEADER="<C-s>: show package info"

	local pac="${1}"
	shift

	export -f _show_info_local

	"${pac}" --query --deps --unrequired --quiet "${@}" |
		_fzf \
			--multi \
			--header "${HEADER}" \
			--preview "_show_info_local ${pac} {}" \
			--bind "ctrl-s:execute(_show_info_local ${pac} {} | less)"
}

_show_info() {
	local pac="${1}"
	shift 1

	env LANG=C "${pac}" --sync --info "${@}"
}

_show_info_local() {
	local pac="${1}"
	shift 1

	env LANG=C "${pac}" --query --info --list "${@}"
}

_install() {
	local pac="${1}"
	shift 1

	echo "${@}"

	if [ "${pac}" = 'pacman' ]; then
		sudo pacman --sync - <<<"${@}"
	else
		"${pac}" --sync - <<<"${@}"
	fi
}

_remove() {
	local pac="${1}"
	shift 1

	if [ "${pac}" = 'pacman' ]; then
		sudo pacman --remove --nosave - <<<"${@}"
	else
		"${pac}" --remove --nosave - <<<"${@}"
	fi
}

_main "${@}"
exit "${?}"
