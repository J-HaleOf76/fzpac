#!/bin/bash

readonly THIS_CMD="${0##*/}"
readonly VERSION='1.1.0'

_help() {
	cat <<EOF
$THIS_CMD -- Arch Linux package finder with fzf

USAGE
    $THIS_CMD SUBCMD KEYWORDS...

SUBCMD
    s, select        Search for and select all available packages.
                     * pacman -Ssq -> fzf
    q, select-local  Search for and select installed packages.
                     * pacman -Qsq -> fzf

    i, info          Search for all available packages,
                     and show detail information that you selected.
                     * pacman -Ssq -> fzf -> pacman -Sii
    l, info-local    Same as [info], but searches for installed packages.
                     instead of all available packages.
                     * pacman -Qsq -> fzf -> pacman -Qil

    p, view          Search for all available packages,
                     and browse the details of the selected one using less pager.
                     * pacman -Ssq -> fzf <--> pacman -Sii|less
    v, view-local    Savem as [view], but searches for installed packages
                     instead of all available packages.
                     * pacman -Qsq -> fzf <--> pacman -Qil|less

    S, install       Select packages and install that you selected.
                     * pacman -Ssq -> fzf -> sudo pacman -S
    R, remove        Select packages and uninstall that you selected.
                     * pacman -Qsq -> fzf -> sudo pacman -Rn

    h, help          Show this usage.
    V, version       Show version.
EOF
}

_test_fzf() {
	if ! command -v fzf &>/dev/null; then
		_err "fzf is not installed. please install it."
		return 1
	fi
}

_get_pacman_cmd() {
	if command -v paru &>/dev/null; then
		echo paru
	elif command -v yay &>/dev/null; then
		echo yay
	elif command -v pacman &>/dev/null; then
		echo pacman
	else
		_err 'The command for pacman or AUR helper was not found.'
		return 1
	fi
}

_version() {
	echo "$THIS_CMD -- Version $VERSION"
}

_main() {
	if [[ $# -lt 1 ]]; then
		_help
		exit 0
	fi

	_test_fzf || return 1

	pacman_cmd="$(_get_pacman_cmd)"

	for arg in "$@"; do
		case "$arg" in
		s | select)
			shift
			_select_available_pkgs "$pacman_cmd" "$@"
			break
			;;
		q | select-local)
			shift
			_select_local_pkgs "$pacman_cmd" "$@"
			break
			;;
		i | info)
			shift
			_select_available_pkgs "$pacman_cmd" "$@" | "$pacman_cmd" -Sii -
			break
			;;
		l | info-local)
			shift
			_select_local_pkgs "$pacman_cmd" "$@" | "$pacman_cmd" -Qii -
			break
			;;
		p | view)
			shift
			_view_available_pkgs "$pacman_cmd" "$@"
			break
			;;
		v | view-local)
			shift
			_view_local_pkgs "$pacman_cmd" "$@"
			break
			;;
		S | install)
			shift
			_select_available_pkgs "$pacman_cmd" "$@" | "$pacman_cmd" -S -
			break
			;;
		R | remove)
			shift
			_select_local_pkgs "$pacman_cmd" "$@" | "$pacman_cmd" -Rn -
			break
			;;
		h | -h | help | --help)
			_help
			break
			;;
		V | version | --version)
			_version
			break
			;;
		*)
			_err "Invalid sub command: $1."
			_help
			return 1
			;;
		esac
	done
}

_err() {
	echo -e "[ \e[31mERR\e[m ] $*" >&2
}

_select_available_pkgs() {
	pacman_cmd="$1"
	shift
	"$pacman_cmd" -Ssq "$@" |
		fzf --multi --preview "$pacman_cmd -Si {}"
}

_select_local_pkgs() {
	pacman_cmd="$1"
	shift
	"$pacman_cmd" -Qsq "$@" |
		fzf --multi --preview "$pacman_cmd -Qil {}"
}

_view_available_pkgs() {
	pacman_cmd="$1"
	shift
	"$pacman_cmd" -Ssq "$@" |
		fzf --preview "$pacman_cmd -Si {}" \
			--bind "enter:execute($pacman_cmd -Sii {} | less)"
}

_view_local_pkgs() {
	pacman_cmd="$1"
	shift
	"$pacman_cmd" -Qsq "$@" |
		fzf --preview "$pacman_cmd -Qil {}" \
			--bind "enter:execute($pacman_cmd -Qil {} | less)"
}

_main "$@"
exit $?
