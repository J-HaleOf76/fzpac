#!/usr/bin/env bash

set -o errexit
set -o nounset

readonly THIS_CMD="${0##*/}"

readonly PACMAN="${FZPAC_PACMAN:-pacman}"

readonly PACMAN_LIST=(
	"paru"
	"yay"
	"pacman"
)

_version() {
	readonly VERSION='1.3.4'
	readonly AUTHOR="sheepla"
	readonly LICENSE="MIT"
	readonly GITHUB_URL="https://github.com"

	cat <<EOF
$THIS_CMD -- v$VERSION

Released under the ${LICENSE} License.
    Repo:   ${GITHUB_URL}/${AUTHOR}/fzpac
    Author: ${AUTHOR} (${GITHUB_URL}/${AUTHOR})"

* ${THIS_CMD} uses this command as a pacman-like command: $(_pacman)
EOF
}

_help() {
	cat <<EOF
${THIS_CMD} -- Arch Linux package finder with fzf

USAGE
    ${THIS_CMD} SUBCMD [KEYWORDS...]
    ${THIS_CMD} --help|--version

SUBCMD
    s, select        SEARCH FOR: all available packages
                     RUN:        pacman -Ssq -> fzf
                     STDOUT:     only names of selected packages
    sl, select-local SEARCH FOR: already installed packages
                     RUN:        pacman -Qsq -> fzf
                     STDOUT:     only names of selected packages

    i, info          SEARCH FOR: all available packages
                     RUN:        pacman -Ssq -> fzf -> pacman -Sii
                     STDOUT:     detailed information on selected packages
    il, info-local   SEARCH FOR: already installed packages
                     RUN:        pacman -Qsq -> fzf -> pacman -Qil
                     STDOUT:     detailed information on selected packages

    b, browse        SEARCH FOR: all available packages
                     RUN:        pacman -Ssq -> fzf <--> pacman -Sii|less
                     STDOUT:     none
    bl, browse-local SEARCH FOR: already installed packages
                     RUN:        pacman -Qsq -> fzf <--> pacman -Qil|less
                     STDOUT:     none

    S, install       select packages and INSTALL it.
                     SEARCH FOR: all available packages
                     RUN:        pacman -Ssq -> fzf -> sudo pacman -S

    R, remove        select packages and UNINSTALL it.
                     SEARCH FOR: already installed packages
                     RUN:        pacman -Qsq -> fzf -> sudo pacman -Rn

    A, autoremove    select packages that are no longer needed and UNINSTALL it.
                     SEARCH FOR: dependencies that are no longer needed
                     RUN:        pacman -Qdtq -> fzf -> sudo pacman -Rns

    h, help          show help message
    V, version       show version

OPTIONS
    --help           show help message
    --version        show version
EOF
}

_test_cmd() {
	for cmd in "${@}"; do
		if ! command -v "${cmd}" &>/dev/null; then
			_err "${cmd} is not installed. please install it."
			return 1
		fi
	done
}

_pacman() {
	if [ ! "${PACMAN}" = "pacman" ]; then
		echo -n "${PACMAN}"
		return 0
	fi

	for pac in "${PACMAN_LIST[@]}"; do
		if command -v "${pac}" &>/dev/null; then
			echo -n "${pac}"
			return 0
		fi
	done

	_err 'The command for pacman or AUR helper was not found.'
	exit 1
}

_fzf() {
	env LANG=C fzf "${@}"
}

_main() {
	if [[ "${#}" -lt 1 ]]; then
		_help
		exit 0
	fi

	_test_cmd fzf || return 1

	local pac
	pac="$(_pacman)"

	for arg in "${@}"; do
		case "${arg}" in
		s | select)
			shift
			_select_from_all_pkgs "${pac}" "${@}"
			break
			;;
		sl | select-local)
			shift
			_select_from_local_pkgs "${pac}" "${@}"
			break
			;;
		i | info)
			shift
			_select_from_all_pkgs "${pac}" "${@}" | "${pac}" --sync --info --info -
			break
			;;
		il | info-local)
			shift
			_select_from_local_pkgs "${pac}" "${@}" | "${pac}" --query --info --info -
			break
			;;
		b | browse)
			shift
			_browse_all_pkgs "${pac}" "${@}"
			break
			;;
		bl | browse-local)
			shift
			_browse_local_pkgs "${pac}" "${@}"
			break
			;;
		S | install)
			shift
			if [ "${pac}" = "pacman" ]; then
				_select_from_all_pkgs pacman "${@}" | sudo pacman --sync -
			else
				_select_from_all_pkgs "${pac}" "${@}" | "${pac}" --sync -
			fi
			break
			;;
		R | remove)
			shift
			if [ "${pac}" = 'pacman' ]; then
				_select_from_local_pkgs pacman "${@}" | sudo pacman --remove --nosave -
			else
				_select_from_local_pkgs "${pac}" "${@}" | "${pac}" --remove --nosave -
			fi
			break
			;;
		A | autoremove)
			shift
			if [ "${pac}" = 'pacman' ]; then
				_select_from_non_required_pkgs "${pac}" "${@}" | sudo pacman --remove --nosave --recursive -
			else
				_select_from_non_required_pkgs "${pac}" "${@}" | "${pac}" --remove --nosave --recursive -
			fi
			break
			;;
		h | -h | help | --help)
			_help
			break
			;;
		V | version | --version)
			_version
			break
			;;
		*)
			_err "Invalid sub command: $1."
			_help
			return 1
			;;
		esac
	done
}

_err() {
	echo -e "[ \e[31mERR\e[m ] ${*}" >&2
}

_select_from_all_pkgs() {
	local pac="$1"
	shift
	"${pac}" --sync --search --quiet "${@}" |
		_fzf --multi --preview "${pac} --sync --info {}"
}

_select_from_local_pkgs() {
	local pac="$1"
	shift
	"${pac}" --query --search --quiet "${@}" |
		_fzf --multi --preview "${pac} --query --info --list {}"
}

_select_from_non_required_pkgs() {
	local pac="$1"
	shift
	"${pac}" --query --deps --unrequired --quiet "${@}" |
		_fzf --multi --preview "${pac} --query --info --list {}"
}

_browse_all_pkgs() {
	local pac="$1"
	shift
	"${pac}" --sync --search --quiet "${@}" |
		_fzf --preview "${pac} --sync --info {}" \
			--bind "enter:execute(${pac} --sync --info --info {} | less)"
}

_browse_local_pkgs() {
	local pac="$1"
	shift
	"${pac}" -Qsq "${@}" |
		_fzf --preview "${pac} --query --info --list {}" \
			--bind "enter:execute(${pac} --query --info --list {} | less)"
}

_main "${@}"
exit "${?}"
